.TH "Compiler.Parser" 3 "Sun Oct 28 2018" "Version 1.0.0" "Compiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Compiler.Parser
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBParser\fP (\fBScanner\fP _scanner)"
.br
.ti -1c
.RI "void \fBParseProgram\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBAccept\fP (params \fBTokenKind\fP[] expectedKinds)"
.br
.ti -1c
.RI "void \fBAcceptIt\fP ()"
.br
.ti -1c
.RI "void \fBParseVname\fP ()"
.br
.ti -1c
.RI "void \fBParseIdentifier\fP ()"
.br
.ti -1c
.RI "void \fBParseOperator\fP ()"
.br
.ti -1c
.RI "void \fBParseIntLiteral\fP ()"
.br
.ti -1c
.RI "void \fBParseCommand\fP ()"
.br
.ti -1c
.RI "void \fBParseExpression\fP ()"
.br
.ti -1c
.RI "void \fBParsePrimaryExpression\fP ()"
.br
.ti -1c
.RI "void \fBParseDeclaration\fP ()"
.br
.ti -1c
.RI "void \fBParsingSingleDeclaration\fP ()"
.br
.ti -1c
.RI "void \fBParseSingleCommand\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Checks that the collection of tokens generated by the scanner follow the rules of the grammar\&. 
.PP
\fBSee also:\fP
.RS 4
Token 
.PP
\fBTokenKind\fP 
.PP
\fBScanner\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Compiler\&.Parser\&.Parser (\fBScanner\fP _scanner)"
Build a
.PP
.nf
Parser 

.fi
.PP
 instance\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_scanner\fP \fBScanner\fP from which to perform the parsing process\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Compiler\&.Parser\&.Accept (params \fBTokenKind\fP [] expectedKinds)\fC [protected]\fP"
Checks that the given token matches the current stream of tokens, if not prints an error\&. 
.PP
\fBParameters:\fP
.RS 4
\fIexpectedKinds\fP an array of expected token kinds\&. 
.RE
.PP

.SS "void Compiler\&.Parser\&.AcceptIt ()\fC [protected]\fP"
Fetches the next token from the source file\&. 
.SS "void Compiler\&.Parser\&.ParseCommand ()\fC [protected]\fP"
Parses a command\&. Multiple tokens swallowed at once\&. 
.SS "void Compiler\&.Parser\&.ParseDeclaration ()\fC [protected]\fP"
Parses a declaration\&. Multiple tokens swallowed at once\&. 
.SS "void Compiler\&.Parser\&.ParseExpression ()\fC [protected]\fP"
Parses an expression\&. Multiple tokens swallowed at once\&. 
.SS "void Compiler\&.Parser\&.ParseIdentifier ()\fC [protected]\fP"
Parses an identifier, and constructs a leaf AST to represent it\&. 
.SS "void Compiler\&.Parser\&.ParseIntLiteral ()\fC [protected]\fP"
Parses an integer literal\&. 
.SS "void Compiler\&.Parser\&.ParseOperator ()\fC [protected]\fP"
Parses an operator\&. 
.SS "void Compiler\&.Parser\&.ParsePrimaryExpression ()\fC [protected]\fP"
Parses a primary expression\&. 
.SS "void Compiler\&.Parser\&.ParseProgram ()"
Parses a program from the beginning to the end\&. 
.SS "void Compiler\&.Parser\&.ParseSingleCommand ()\fC [protected]\fP"
Parses a single command\&. 
.SS "void Compiler\&.Parser\&.ParseVname ()\fC [protected]\fP"
Parses a variable name\&. 
.SS "void Compiler\&.Parser\&.ParsingSingleDeclaration ()\fC [protected]\fP"
Parses a single declaration\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Compiler from the source code\&.
