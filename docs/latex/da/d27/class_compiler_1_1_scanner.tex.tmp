\hypertarget{class_compiler_1_1_scanner}{}\section{Compiler.\+Scanner Class Reference}
\label{class_compiler_1_1_scanner}\index{Compiler.\+Scanner@{Compiler.\+Scanner}}


Inheritance diagram for Compiler.\+Scanner\+:
% FIG 0


Collaboration diagram for Compiler.\+Scanner\+:
% FIG 1
\subsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{class_compiler_1_1_scanner_a1b80cbd150fb8fdb87f6b31c9d2ddc48}{Scanner}} (\mbox{\hyperlink{class_compiler_1_1_source_file}{Source\+File}} \+\_\+source)
\item 
I\+Enumerator$<$ Token $>$ \mbox{\hyperlink{class_compiler_1_1_scanner_aea1e54cd0fb8a4b19f9403be60720ff9}{Get\+Enumerator}} ()
\end{DoxyCompactItemize}
\subsection*{Protected Member Functions}
\begin{DoxyCompactItemize}
\item 
bool \mbox{\hyperlink{class_compiler_1_1_scanner_afbd70f210f32a803266e042bfe13e58b}{Is\+Operator}} (char c)
\item 
bool \mbox{\hyperlink{class_compiler_1_1_scanner_adb2fc8cf5a107c41d73e00eb93a98ca2}{Is\+Ignored}} (char c)
\item 
bool \mbox{\hyperlink{class_compiler_1_1_scanner_a60cdf39c3f0fb8d97ca4b635ca2eb0c2}{Is\+Special}} (char c)
\item 
bool \mbox{\hyperlink{class_compiler_1_1_scanner_a6b4be2a8e2aa19e24ecb1abc692dcebc}{Is\+Graphic}} (char c)
\item 
void \mbox{\hyperlink{class_compiler_1_1_scanner_abd981910f7c2f50c9ed8e778d93fffdd}{Ignore\+Useless}} ()
\end{DoxyCompactItemize}
\subsection*{Properties}
\begin{DoxyCompactItemize}
\item 
static bool \mbox{\hyperlink{class_compiler_1_1_scanner_aebce05a12eba0f6267dfa8dd2fa07b1f}{Debug}} = true\hspace{0.3cm}{\ttfamily  \mbox{[}get, set\mbox{]}}
\end{DoxyCompactItemize}


\subsection{Detailed Description}
Split the source file into tokens, checks the validity of the stream on the fly. Does not perform syntax checks. \begin{DoxySeeAlso}{See also}
Token 

\mbox{\hyperlink{namespace_compiler_a57929962f25004759596fc3f13cf563c}{Token\+Kind}} 
\end{DoxySeeAlso}


\subsection{Constructor \& Destructor Documentation}
\mbox{\Hypertarget{class_compiler_1_1_scanner_a1b80cbd150fb8fdb87f6b31c9d2ddc48}\label{class_compiler_1_1_scanner_a1b80cbd150fb8fdb87f6b31c9d2ddc48}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Scanner@{Scanner}}
\index{Scanner@{Scanner}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Scanner()}{Scanner()}}
{\footnotesize\ttfamily Compiler.\+Scanner.\+Scanner (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{class_compiler_1_1_source_file}{Source\+File}}}]{\+\_\+source }\end{DoxyParamCaption})}

Builds a
\begin{DoxyCode}
\mbox{\hyperlink{class_compiler_1_1_scanner_a1b80cbd150fb8fdb87f6b31c9d2ddc48}{Scanner}} 
\end{DoxyCode}
 instance. 
\begin{DoxyParams}{Parameters}
{\em \+\_\+source} & reference to the source file to scan. \\
\hline
\end{DoxyParams}
\begin{DoxySeeAlso}{See also}
\mbox{\hyperlink{class_compiler_1_1_source_file}{Source\+File}} 
\end{DoxySeeAlso}


\subsection{Member Function Documentation}
\mbox{\Hypertarget{class_compiler_1_1_scanner_aea1e54cd0fb8a4b19f9403be60720ff9}\label{class_compiler_1_1_scanner_aea1e54cd0fb8a4b19f9403be60720ff9}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Get\+Enumerator@{Get\+Enumerator}}
\index{Get\+Enumerator@{Get\+Enumerator}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Get\+Enumerator()}{GetEnumerator()}}
{\footnotesize\ttfamily I\+Enumerator$<$Token$>$ Compiler.\+Scanner.\+Get\+Enumerator (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Responsible for the main process of creating a collection of tokens from the source file. \begin{DoxyReturn}{Returns}
a collection of tokens of type
\begin{DoxyCode}
IEnumerator<Token> 
\end{DoxyCode}
 . 
\end{DoxyReturn}
\begin{DoxySeeAlso}{See also}
Token 

\mbox{\hyperlink{class_compiler_1_1_source_file}{Source\+File}} 
\end{DoxySeeAlso}
\mbox{\Hypertarget{class_compiler_1_1_scanner_abd981910f7c2f50c9ed8e778d93fffdd}\label{class_compiler_1_1_scanner_abd981910f7c2f50c9ed8e778d93fffdd}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Ignore\+Useless@{Ignore\+Useless}}
\index{Ignore\+Useless@{Ignore\+Useless}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Ignore\+Useless()}{IgnoreUseless()}}
{\footnotesize\ttfamily void Compiler.\+Scanner.\+Ignore\+Useless (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}

Skips whitespaces and comments in the source file. \mbox{\Hypertarget{class_compiler_1_1_scanner_a6b4be2a8e2aa19e24ecb1abc692dcebc}\label{class_compiler_1_1_scanner_a6b4be2a8e2aa19e24ecb1abc692dcebc}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Is\+Graphic@{Is\+Graphic}}
\index{Is\+Graphic@{Is\+Graphic}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Is\+Graphic()}{IsGraphic()}}
{\footnotesize\ttfamily bool Compiler.\+Scanner.\+Is\+Graphic (\begin{DoxyParamCaption}\item[{char}]{c }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}

Test if a character is a graphic character. It includes digits, letters, operators and special characters. 
\begin{DoxyParams}{Parameters}
{\em c} & the character to test. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}

\begin{DoxyCode}
\textcolor{keyword}{true} 
\end{DoxyCode}
 if the character is a graphic character,
\begin{DoxyCode}
\textcolor{keyword}{false} 
\end{DoxyCode}
 otherwise. 
\end{DoxyReturn}
\mbox{\Hypertarget{class_compiler_1_1_scanner_adb2fc8cf5a107c41d73e00eb93a98ca2}\label{class_compiler_1_1_scanner_adb2fc8cf5a107c41d73e00eb93a98ca2}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Is\+Ignored@{Is\+Ignored}}
\index{Is\+Ignored@{Is\+Ignored}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Is\+Ignored()}{IsIgnored()}}
{\footnotesize\ttfamily bool Compiler.\+Scanner.\+Is\+Ignored (\begin{DoxyParamCaption}\item[{char}]{c }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}

Test if a character or a sequence is to be ignored by the compiler. 
\begin{DoxyParams}{Parameters}
{\em c} & the character to test. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}

\begin{DoxyCode}
\textcolor{keyword}{true} 
\end{DoxyCode}
 if the character matches an ignored character,
\begin{DoxyCode}
\textcolor{keyword}{false} 
\end{DoxyCode}
 otherwise. 
\end{DoxyReturn}
\begin{DoxySeeAlso}{See also}
ignored 
\end{DoxySeeAlso}
\mbox{\Hypertarget{class_compiler_1_1_scanner_afbd70f210f32a803266e042bfe13e58b}\label{class_compiler_1_1_scanner_afbd70f210f32a803266e042bfe13e58b}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Is\+Operator@{Is\+Operator}}
\index{Is\+Operator@{Is\+Operator}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Is\+Operator()}{IsOperator()}}
{\footnotesize\ttfamily bool Compiler.\+Scanner.\+Is\+Operator (\begin{DoxyParamCaption}\item[{char}]{c }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}

Test if a character is an operator. 
\begin{DoxyParams}{Parameters}
{\em c} & the character to test. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}

\begin{DoxyCode}
\textcolor{keyword}{true} 
\end{DoxyCode}
 if the character matches an operator,
\begin{DoxyCode}
\textcolor{keyword}{false} 
\end{DoxyCode}
 otherwise. 
\end{DoxyReturn}
\begin{DoxySeeAlso}{See also}
operators 
\end{DoxySeeAlso}
\mbox{\Hypertarget{class_compiler_1_1_scanner_a60cdf39c3f0fb8d97ca4b635ca2eb0c2}\label{class_compiler_1_1_scanner_a60cdf39c3f0fb8d97ca4b635ca2eb0c2}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Is\+Special@{Is\+Special}}
\index{Is\+Special@{Is\+Special}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Is\+Special()}{IsSpecial()}}
{\footnotesize\ttfamily bool Compiler.\+Scanner.\+Is\+Special (\begin{DoxyParamCaption}\item[{char}]{c }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}

Test if a character is a special character. 
\begin{DoxyParams}{Parameters}
{\em c} & the character to test. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}

\begin{DoxyCode}
\textcolor{keyword}{true} 
\end{DoxyCode}
 if the character matches a special character,
\begin{DoxyCode}
\textcolor{keyword}{false} 
\end{DoxyCode}
 otherwise. 
\end{DoxyReturn}
\begin{DoxySeeAlso}{See also}
specials 
\end{DoxySeeAlso}


\subsection{Property Documentation}
\mbox{\Hypertarget{class_compiler_1_1_scanner_aebce05a12eba0f6267dfa8dd2fa07b1f}\label{class_compiler_1_1_scanner_aebce05a12eba0f6267dfa8dd2fa07b1f}} 
\index{Compiler\+::\+Scanner@{Compiler\+::\+Scanner}!Debug@{Debug}}
\index{Debug@{Debug}!Compiler\+::\+Scanner@{Compiler\+::\+Scanner}}
\subsubsection{\texorpdfstring{Debug}{Debug}}
{\footnotesize\ttfamily bool Compiler.\+Scanner.\+Debug = true\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [get]}, {\ttfamily [set]}}

Holds a boolean set to true if the \mbox{\hyperlink{class_compiler_1_1_scanner}{Scanner}} runs in debug mode. In that case the process is more verbose. 

The documentation for this class was generated from the following file\+:\begin{DoxyCompactItemize}
\item 
Compiler/Scanner.\+cs\end{DoxyCompactItemize}
